name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  windows-msvc:
    name: Windows MSVC (${{ matrix.config }})
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        config: [Release, Debug]
    env:
      CONAN_HOME: ${{ github.workspace }}\conan_cache
      PANDOLABO_ENABLE_GPU_TESTS: "0"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache Conan (v2)
        uses: actions/cache@v4
        with:
          path: ${{ env.CONAN_HOME }}
          key: conan2-${{ runner.os }}-${{ hashFiles('conanfile.txt') }}
          restore-keys: |
            conan2-${{ runner.os }}-

      - name: Install Conan
        shell: pwsh
        run: |
          python -m pip install --upgrade pip
          python -m pip install "conan>=2.0"

      - name: Conan profile detect
        shell: pwsh
        run: |
          conan profile detect --force

      - name: Conan install dependencies
        shell: pwsh
        run: |
          conan install . --output-folder=build --build=missing

      - name: Configure CMake (MSVC)
        shell: pwsh
        run: |
          cmake -B build -G "Visual Studio 17 2022" -DCMAKE_TOOLCHAIN_FILE="${{ github.workspace }}\build\generators\conan_toolchain.cmake" -DCMAKE_POLICY_DEFAULT_CMP0091=NEW

      - name: Build tests (${{ matrix.config }})
        shell: pwsh
        run: |
          cmake --build build --config ${{ matrix.config }} --target tests

      - name: Build examples (${{ matrix.config }})
        shell: pwsh
        run: |
          cmake --build build --config ${{ matrix.config }} --target examples_all

      - name: Run tests (JUnit report)
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path build/test-results | Out-Null
          $exe = "build/tests/${{ matrix.config }}/tests.exe"
          if (-not (Test-Path $exe)) { throw "Tests binary not found: $exe" }
          & $exe --reporter junit --out build/test-results/junit-${{ matrix.config }}.xml

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.config }}
          path: build/test-results/junit-${{ matrix.config }}.xml
          if-no-files-found: warn

      - name: Upload example binaries
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: examples-${{ matrix.config }}
          path: |
            build/examples/${{ matrix.config }}/*.exe
          if-no-files-found: warn
